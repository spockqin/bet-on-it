{"version":3,"sources":["../src/index.js"],"names":["lmsr","utils","oracles","events","markets","windowLoaded","accept","reject","window","addEventListener","Error","loadHandler","event","removeEventListener","gasStatsData","require","gasLimit","gasDefaultMaxMultiplier","implementationInterfaceMap","StandardMarket","contractArtifacts","map","name","instanceModules","Gnosis","opts","ipfs","host","port","protocol","gnosis","initialized","promisifyAll","contracts","artifact","c","contract_name","prototype","gasStats","addProp","cs","maxGasCost","Math","max","fnStats","gasUsed","Infinity","implName","defaults","gas","min","TruffleContract","forEach","module","instanceProp","estimateGas","bind","setWeb3Provider","ethereum","provider","web3","currentProvider","providers","HttpProvider","constructor","endsWith","TypeError","setProvider","promisify","eth","getAccounts","accounts","length","setDefaultAccount","all","trySettingContractInstance","EtherToken","StandardMarketFactory","LMSRMarketMaker","instanceName","contract","deployed","message","includes","account","defaultAccount","from"],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash'\nimport TruffleContract from 'truffle-contract'\nimport Web3 from 'web3'\nimport IPFS from 'ipfs-mini'\n\nimport * as lmsr from './lmsr'\nimport * as utils from './utils'\nimport * as oracles from './oracles'\nimport * as events from './events'\nimport * as markets from './markets'\n\nconst windowLoaded = new Promise((accept, reject) => {\n    if(typeof window === 'undefined')\n        return accept()\n\n    if(typeof window.addEventListener !== 'function')\n        return reject(new Error('expected to be able to register event listener'))\n\n    window.addEventListener('load', function loadHandler(event) {\n        window.removeEventListener('load', loadHandler, false)\n        return accept(event)\n    }, false)\n})\n\nconst gasStatsData = require('@gnosis.pm/gnosis-core-contracts/build/gas-stats.json')\nconst gasLimit = 4e6\nconst gasDefaultMaxMultiplier = 1.5\n\nconst implementationInterfaceMap = {\n    StandardMarket: ['Market'],\n}\n\nconst contractArtifacts = [\n    'Math',\n    'Event',\n    'CategoricalEvent',\n    'ScalarEvent',\n    'EventFactory',\n    'Token',\n    'EtherToken',\n    'CentralizedOracle',\n    'CentralizedOracleFactory',\n    'UltimateOracle',\n    'UltimateOracleFactory',\n    'LMSRMarketMaker',\n    'Market',\n    'StandardMarket',\n    'StandardMarketFactory',\n].map((name) => require(`@gnosis.pm/gnosis-core-contracts/build/contracts/${name}.json`))\n\nconst instanceModules = [oracles, events, markets]\n\n/**\n * Represents the gnosis.js API\n */\nclass Gnosis {\n    /**\n     * Factory function for asynchronously creating an instance of the API\n     *\n     * Note: this method is asynchronous and will return a Promise\n     *\n     * @param {(string|Provider)} [opts.ethereum] - An instance of a Web3 provider or a URL of a Web3 HTTP provider. If not specified, Web3 provider will be either the browser-injected Web3 (Mist/MetaMask) or an HTTP provider looking at http://localhost:8545\n     * @param {Object} [opts.ipfs] - ipfs-mini configuration object\n     * @param {string} [opts.ipfs.host='ipfs.infura.io'] - IPFS node address\n     * @param {Number} [opts.ipfs.port=5001] - IPFS protocol port\n     * @param {string} [opts.ipfs.protocol='https'] - IPFS protocol name\n     * @returns {Gnosis} An instance of the gnosis.js API\n     */\n    static async create (opts) {\n        opts = _.defaultsDeep(opts || {}, {\n            ipfs: {\n                host: 'ipfs.infura.io',\n                port: 5001,\n                protocol: 'https'\n            }\n        })\n\n        let gnosis = new Gnosis(opts)\n        await gnosis.initialized(opts)\n        return gnosis\n    }\n\n    /**\n     * **Warning:** Do not use constructor directly. Some asynchronous initialization will not be handled. Instead, use {@link Gnosis.create}.\n     * @constructor\n     */\n    constructor (opts) {\n        // IPFS instantiation\n        this.ipfs = utils.promisifyAll(new IPFS(opts.ipfs))\n\n        /**\n         * A collection of Truffle contract abstractions for the following Gnosis contracts:\n         *\n         * - [Math](https://gnosis.github.io/gnosis-contracts/docs/Math)\n         * - [Event](https://gnosis.github.io/gnosis-contracts/docs/Event)\n         * - [CategoricalEvent](https://gnosis.github.io/gnosis-contracts/docs/CategoricalEvent)\n         * - [ScalarEvent](https://gnosis.github.io/gnosis-contracts/docs/ScalarEvent)\n         * - [EventFactory](https://gnosis.github.io/gnosis-contracts/docs/EventFactory)\n         * - [Token](https://gnosis.github.io/gnosis-contracts/docs/Token)\n         * - [EtherToken](https://gnosis.github.io/gnosis-contracts/docs/EtherToken)\n         * - [CentralizedOracle](https://gnosis.github.io/gnosis-contracts/docs/CentralizedOracle)\n         * - [CentralizedOracleFactory](https://gnosis.github.io/gnosis-contracts/docs/CentralizedOracleFactory)\n         * - [UltimateOracle](https://gnosis.github.io/gnosis-contracts/docs/UltimateOracle)\n         * - [UltimateOracleFactory](https://gnosis.github.io/gnosis-contracts/docs/UltimateOracleFactory)\n         * - [LMSRMarketMaker](https://gnosis.github.io/gnosis-contracts/docs/LMSRMarketMaker)\n         * - [Market](https://gnosis.github.io/gnosis-contracts/docs/Market)\n         * - [StandardMarket](https://gnosis.github.io/gnosis-contracts/docs/StandardMarket)\n         * - [StandardMarketFactory](https://gnosis.github.io/gnosis-contracts/docs/StandardMarketFactory)\n         *\n         * These are configured to use the web3 provider specified in {@link Gnosis.create} or subsequently modified with {@link Gnosis#setWeb3Provider}. The default gas costs for these abstractions are set to the maximum cost of their respective entries found in the `gas-stats.json` file built from the [core contracts](https://github.com/gnosis/gnosis-contracts#readme). Additionally, the default message sender (i.e. `from` address) is set to the first account reported by the web3 provider.\n         *\n         * @member {Object} Gnosis#contracts\n         */\n        this.contracts = _.fromPairs(contractArtifacts.map((artifact) => {\n            const c = TruffleContract(artifact)\n            const name = c.contract_name\n\n            if(gasStatsData[name] != null) {\n                c.prototype.gasStats = gasStatsData[name]\n                c.addProp('gasStats', () => gasStatsData[name])\n            }\n\n            return [name, c]\n        }))\n\n        _.forEach(this.contracts, (c, name, cs) => {\n            const maxGasCost = Math.max(\n                ...Object.values(c.gasStats || {}).map(\n                    (fnStats) => fnStats.max != null ? fnStats.max.gasUsed : -Infinity),\n                ..._.flatMap(implementationInterfaceMap[name] || [],\n                    (implName) => Object.values(cs[implName].gasStats || {}).map(\n                        (fnStats) => fnStats.max != null ? fnStats.max.gasUsed : -Infinity))\n            )\n\n            if(maxGasCost > 0) {\n                c.defaults({ gas: Math.min(gasLimit, (1.5 * maxGasCost) | 0) })\n            }\n        })\n\n        this.TruffleContract = TruffleContract\n\n        instanceModules.forEach((module) => {\n            Object.keys(module).forEach((instanceProp) => {\n                if(\n                    this[instanceProp] != null &&\n                    typeof this[instanceProp].estimateGas === 'function'\n                ) {\n                    this[instanceProp].estimateGas = this[instanceProp].estimateGas.bind(this)\n                }\n            })\n        })\n    }\n\n    async initialized (opts) {\n        await this.setWeb3Provider(opts.ethereum)\n    }\n\n    /**\n     * Setter for the ethereum web3 provider.\n     *\n     * Note: this method is asynchronous and will return a Promise\n     *\n     * @param {(string|Provider)} [provider] - An instance of a Web3 provider or a URL of a Web3 HTTP provider. If not specified, Web3 provider will be either the browser-injected Web3 (Mist/MetaMask) or an HTTP provider looking at http://localhost:8545\n     */\n    async setWeb3Provider (provider) {\n        if (provider == null) {\n            // Prefer Web3 injected by the browser (Mist/MetaMask)\n            // Window must be loaded first so that there isn't a race condition for resolving injected Web3 instance\n            await windowLoaded\n\n            if (typeof web3 !== 'undefined') {\n                this.web3 = new Web3(web3.currentProvider)\n            } else {\n                this.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))\n            }\n        } else if (typeof provider === 'string') {\n            this.web3 = new Web3(new Web3.providers.HttpProvider(provider))\n        } else if (typeof provider === 'object' && provider.constructor.name.endsWith('Provider')) {\n            this.web3 = new Web3(provider)\n        } else {\n            throw new TypeError(`provider of type '${typeof provider}' not supported`)\n        }\n\n        _.forOwn(this.contracts, (c) => { c.setProvider(this.web3.currentProvider) })\n\n        const accounts = await utils.promisify(this.web3.eth.getAccounts)()\n\n        if (accounts.length > 0) {\n            this.setDefaultAccount(accounts[0])\n        }\n\n        await Promise.all([\n            /**\n             * If [EtherToken](https://gnosis.github.io/gnosis-contracts/docs/EtherToken/) is deployed to the current network, this will be set to an EtherToken contract abstraction pointing at the deployment address.\n             *\n             * @member {Contract} Gnosis#etherToken\n             */\n            this.trySettingContractInstance('etherToken', this.contracts.EtherToken),\n\n            /**\n             * If [StandardMarketFactory](https://gnosis.github.io/gnosis-contracts/docs/StandardMarketFactory/) is deployed to the current network, this will be set to an StandardMarketFactory contract abstraction pointing at the deployment address.\n             *\n             * @member {Contract} Gnosis#standardMarketFactory\n             */\n            this.trySettingContractInstance('standardMarketFactory', this.contracts.StandardMarketFactory),\n\n            /**\n             * If [LMSRMarketMaker](https://gnosis.github.io/gnosis-contracts/docs/LMSRMarketMaker/) is deployed to the current network, this will be set to an LMSRMarketMaker contract abstraction pointing at the deployment address.\n             *\n             * @member {Contract} Gnosis#lmsrMarketMaker\n             */\n            this.trySettingContractInstance('lmsrMarketMaker', this.contracts.LMSRMarketMaker),\n        ])\n    }\n\n    async trySettingContractInstance(instanceName, contract) {\n        try {\n            this[instanceName] = await contract.deployed()\n        } catch(e) {\n            delete this[instanceName]\n            if(!e.message.includes('has not been deployed to detected network')) {\n                throw e\n            }\n        }\n    }\n\n\n    setDefaultAccount (account) {\n        this.defaultAccount = account\n        _.forOwn(this.contracts, (c) => {\n            c.defaults({\n                from: account\n            })\n        })\n    }\n}\n\n_.assign(Gnosis.prototype, ...instanceModules)\n_.assign(Gnosis, lmsr, utils)\n\nexport default Gnosis\n"]}