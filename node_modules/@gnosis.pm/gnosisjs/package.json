{
  "_args": [
    [
      {
        "raw": "@gnosis.pm/gnosisjs@^0.5.4",
        "scope": "@gnosis.pm",
        "escapedName": "@gnosis.pm%2fgnosisjs",
        "name": "@gnosis.pm/gnosisjs",
        "rawSpec": "^0.5.4",
        "spec": ">=0.5.4 <0.6.0",
        "type": "range"
      },
      "/Users/ashley.nguyen27/gnosis-tasks"
    ]
  ],
  "_from": "@gnosis.pm/gnosisjs@>=0.5.4 <0.6.0",
  "_id": "@gnosis.pm/gnosisjs@0.5.4",
  "_inCache": true,
  "_location": "/@gnosis.pm/gnosisjs",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gnosisjs-0.5.4.tgz_1507363971245_0.8820513715036213"
  },
  "_npmUser": {
    "name": "alanlu1023",
    "email": "alanlu1023@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@gnosis.pm/gnosisjs@^0.5.4",
    "scope": "@gnosis.pm",
    "escapedName": "@gnosis.pm%2fgnosisjs",
    "name": "@gnosis.pm/gnosisjs",
    "rawSpec": "^0.5.4",
    "spec": ">=0.5.4 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@gnosis.pm/gnosisjs/-/gnosisjs-0.5.4.tgz",
  "_shasum": "5b2960c844cb65cce8da8857c76eeb5d2df4bbe7",
  "_shrinkwrap": null,
  "_spec": "@gnosis.pm/gnosisjs@^0.5.4",
  "_where": "/Users/ashley.nguyen27/gnosis-tasks",
  "author": {
    "name": "Gnosis",
    "url": "https://gnosis.pm/"
  },
  "bugs": {
    "url": "https://github.com/gnosis/gnosis.js/issues"
  },
  "dependencies": {
    "@gnosis.pm/gnosis-core-contracts": "^0.3.5",
    "babel-polyfill": "^6.26.0",
    "babel-runtime": "^6.26.0",
    "decimal.js": "^7.2.4",
    "ipfs-mini": "^1.1.2",
    "lodash": "^4.17.4",
    "truffle-contract": "^3.0.0",
    "web3": "^0.20.2"
  },
  "description": "A javascript library for building applications on top of Gnosis, the Ethereum prediction market platform",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.0",
    "babel-loader": "^7.1.2",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-lodash": "^3.2.11",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.6.0",
    "babel-register": "^6.26.0",
    "cross-env": "^5.0.5",
    "css-loader": "^0.28.7",
    "eslint": "^4.7.0",
    "eslint-plugin-babel": "^4.1.2",
    "ethereumjs-testrpc": "^4.1.3",
    "jsdoc": "^3.5.5",
    "jsdoc-strip-async-await": "^0.1.0",
    "json-loader": "^0.5.7",
    "json-x-loader": "^0.2.0",
    "lodash-webpack-plugin": "^0.11.4",
    "minami": "github:cag/minami",
    "mocha": "^3.5.3",
    "npm-prepublish": "^1.2.3",
    "open": "0.0.5",
    "run-with-testrpc": "^0.2.1",
    "style-loader": "^0.18.2",
    "truffle": "^3.4.9",
    "webpack": "^3.6.0",
    "webpack-dev-server": "^2.8.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-iOmgwepKE1PTScNZFz4LVbzrg0yE7WyX7/sEXY9yWY6ZZOmi8sY9NAVzh2Z0dEW198xJZT4Z5KGYR6ulfeJqmw==",
    "shasum": "5b2960c844cb65cce8da8857c76eeb5d2df4bbe7",
    "tarball": "https://registry.npmjs.org/@gnosis.pm/gnosisjs/-/gnosisjs-0.5.4.tgz"
  },
  "gitHead": "416734508154393998f7ad8aac1ef641488b31e6",
  "homepage": "https://github.com/gnosis/gnosis.js#readme",
  "keywords": [
    "gnosis",
    "ethereum",
    "blockchain",
    "contract",
    "library",
    "prediction",
    "market"
  ],
  "license": "MIT",
  "main": "dist/index",
  "maintainers": [
    {
      "name": "alanlu1023",
      "email": "alanlu1023@gmail.com"
    },
    {
      "name": "stefan.george",
      "email": "stefan.david.george@gmail.com"
    },
    {
      "name": "roland97",
      "email": "roland@97.network"
    }
  ],
  "name": "@gnosis.pm/gnosisjs",
  "optionalDependencies": {},
  "readme": "# Gnosis.js Library \n\n[![Logo](https://raw.githubusercontent.com/gnosis/gnosis.js/master/assets/logo.png)](https://gnosis.pm/)\n\n[![Build Status](https://travis-ci.org/gnosis/gnosis.js.svg?branch=master)](https://travis-ci.org/gnosis/gnosis.js)\n\n[![Slack Status](https://slack.gnosis.pm/badge.svg)](https://slack.gnosis.pm)\n\n## Really quick start\n\n1. Get [TestRPC](https://github.com/ethereumjs/testrpc)\n2. Run this:\n   ```\n   testrpc -d -i 437894314312\n   ```\n3. Clone [Gnosis contracts](https://github.com/gnosis/gnosis-contracts), cd in there, and migrate the contracts onto the TestRPC instance with:\n   ```\n   cd path/to/gnosis-contracts\n   npm install\n   npm run migrate\n   ```\n4. Download [`gnosis.js`](https://raw.githubusercontent.com/gnosis/gnosis.js/master/dist/gnosis.js) and put it in an HTML file:\n   ```\n   <script src=gnosis.js></script>\n   ```\n5. Follow some tutorials:\n   * [API Overview](https://gnosis.github.io/gnosis.js/tutorial-api-overview.html)\n   * [Events, Oracles, and Markets](https://gnosis.github.io/gnosis.js/tutorial-events-oracles-and-markets.html)\n\n\n## Installation\n\nRun `npm install` to install dependencies.\n\nNeeds a Web3 provider to work. For testing, try TestRPC.\n\n## Development\n\nBefore you begin, you will want to have the contracts deployed on the chain you plan to use. You can deploy contracts through the RPC interface on localhost:8545 with\n\n```\nnpm run migrate\n```\n\nThe build process using Truffle will insert the chain locations in a `networks` key on the contract build artifacts.\n\n### Building\n\nYou can run `npm run nodebuild` to build the library for Node.js use.\n\nYou can also run `npm run webbuild` to build the library targeting the web. Note that this will compile in all network information present in the build artifacts, including temporary network information generated by TestRPC during migrations. You may use `npm run netreset` beforehand to remove unofficial network info and reset to official deployed locations if desired.\n\n### Running the dev server\n\nRun `npm run dev` to run the dev server and serve the examples. The library source will be continuously recompiled. Examples will be available on http://localhost:8080. Don't forget to refresh the page after you change the source.\n\n### Running the tests\n\nRun `npm test` to run test suite. This should run without the need of an RPC provider running on localhost:8545. If you already have such a provider running and wish to run the test suite without automatically spinning up TestRPC and causing a chain migration, use `npm run test-manual`.\n\nYou may also provide mocha options through the `MOCHA_OPTS` environment variable, e.g. `MOCHA_OPTS='-g estimate' npm test`.\n\n## Documentation\n\nAPI documentation and tutorials can be found hosted online at https://gnosis.github.io/gnosis.js/\n\n### Running the docs\n\nRun `npm run doc` to build and open a local build of the documentation in your browser.\n\n### Web3 options\n\nThe methods on the API can be provided with `from`, `to`, `value`, `gas`, and `gasPrice` options which get passed down to the `web3.js` layer.\n\n### Gas estimations\n\nMany of the methods on the gnosis API also have an asynchronous `estimateGas` property which you can use, while allowing you to specify the gas estimation source. For example:\n\n```javascript\n// using the estimateGas RPC\nawait gnosis.createCentralizedOracle.estimateGas(ipfsHash, { using: 'rpc' }))\n\n// using stats derived from gnosis-contracts\nawait gnosis.createCentralizedOracle.estimateGas({ using: 'stats' }))\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gnosis/gnosis.js.git"
  },
  "scripts": {
    "compile": "cd node_modules/@gnosis.pm/gnosis-core-contracts && truffle compile",
    "dev": "webpack-dev-server",
    "doc": "jsdoc -c jsdoc-conf.json && node -e 'require(\"open\")(\"./docs/index.html\")'",
    "docbuild": "jsdoc -c jsdoc-conf.json",
    "lint": "eslint ./",
    "migrate": "cd node_modules/@gnosis.pm/gnosis-core-contracts && truffle migrate",
    "netreset": "cd node_modules/@gnosis.pm/gnosis-core-contracts && truffle networks --clean && node scripts/inject_network_info.js",
    "nodebuild": "babel src/ --out-dir dist --source-maps",
    "prepublish": "npm run netreset && npm run nodebuild && npm run webbuild && npm run docbuild",
    "test": "run-with-testrpc -l 40000000 'npm run migrate && npm run test-manual'",
    "test-gnosisdb": "cross-env GNOSIS_OPTIONS='{\"ipfs\":{\"host\":\"localhost\",\"port\":5001,\"protocol\":\"http\"}}' npm run test-manual",
    "test-manual": "mocha --compilers js:babel-register $MOCHA_OPTS",
    "webbuild": "webpack && cross-env WEBPACK_ENV=minified webpack -p"
  },
  "version": "0.5.4"
}
